{
  lib,
  pkgs,
  ...
}: let
  inherit (lib) concatMapStrings getExe mkOption mkIf replaceStrings toUpper types flip mapAttrs getAttr mapAttrs' nameValuePair concatStringsSep mapAttrsToList mkMerge;
  inherit (types) attrsOf submodule str listOf anything;
in {
  options.canivete.opentofu.workspaces = mkOption {
    type = attrsOf (submodule ({config, ...}: let
      inherit (config) kubernetes passwords sops;
      environment = mapAttrs' (_: cfg: nameValuePair cfg.env cfg.value) sops;
    in {
      options = {
        passwords = mkOption {
          type = attrsOf (attrsOf anything);
          default = {};
          description = "Terraform random_password configs";
        };
        sops = mkOption {
          default = {};
          description = "Secrets generated by Terraform to store in SOPS";
          type = attrsOf (submodule ({
            config,
            name,
            ...
          }: {
            options = {
              value = mkOption {
                type = str;
                description = "Terraform attribute reference with SOPS secret contents";
              };
              path = mkOption {
                type = listOf str;
                description = "Path in the default encrypted SOPS file to drop the secret";
              };
              env = mkOption {
                type = str;
                default = replaceStrings ["." "-"] ["__" "_"] (toUpper name);
                description = "Name of variable in a shell environment";
              };
              command = mkOption {
                type = str;
                default = let
                  indexPath = concatMapStrings (segment: "[\"${segment}\"]") config.path;
                  # TODO why does this create a weird syntax highlighting issue in the file?
                  envValue = "\\\"\$${config.env}\\\"";
                  # TODO configure the file for this
                in "${getExe pkgs.sops} set .canivete/sops/default.yaml '${indexPath}' \"${envValue}\"";
                description = "Command to save value in SOPS, running in the project root directory";
              };
            };
          }));
        };
      };
      config = mkMerge [
        (mkIf (passwords != {}) {
          plugins = ["opentofu/random"];
          sops = flip mapAttrs passwords (name: _: {
            path = ["passwords" name];
            value = "\${ random_password.${name}.result }";
          });
          modules.resource.random_password = passwords;
        })
        (mkIf (sops != {}) {
          modules.resource.null_resource = mkMerge [
            {
              sops = {
                triggers = mapAttrs (_: getAttr "value") sops;
                provisioner.local-exec.environment = environment;
                provisioner.local-exec.command = ''
                  cd "$(${getExe pkgs.git} rev-parse --show-toplevel)"
                  ${concatStringsSep "\n" (mapAttrsToList (_: getAttr "command") sops)}
                '';
              };
            }
            (mkIf (kubernetes.cluster != null) {
              kubernetes.depends_on = ["null_resource.sops"];
              kubernetes.provisioner.local-exec.environment = environment;
            })
          ];
        })
      ];
    }));
  };
}
